@page "/add_user"
@page "/add_user/{Id}"

@using CDPModule1.Client.Services;
@using CDPModule1.Shared
@using CDPModule1.Shared.RequestModel
@using System.Text
@using System.Security.Claims;
@using System.IdentityModel.Tokens.Jwt;

@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;

<PageTitle>UserForm</PageTitle>

<h1>User</h1>

<EditForm Model="@user" OnValidSubmit="@Save" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />

    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Name:</label>
        <div class="col-md-10">
            <InputText id="name" class="form-control" @bind-Value="user.Name" />
            <ValidationMessage For="@(() => user.Name)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText type="email" id="email" class="form-control" @bind-Value="user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="user.Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="address" class="col-md-2 col-form-label">Address:</label>
        <div class="col-md-10">
            <InputText id="address" class="form-control" @bind-Value="user.Address" />
            <ValidationMessage For="@(() => user.Address)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="dob" class="col-md-2 col-form-label">DOB:</label>
        <div class="col-md-10">
            <InputDate id="dob" class="form-control" @bind-Value="user.DOB" />
            <ValidationMessage For="@(() => user.DOB)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="dob" class="col-md-2 col-form-label">Gender</label>
        <div class="col-md-10">
            <InputRadioGroup @bind-Value="user.Gender">
                <InputRadio Value="@("Female")" /> @("Female") 
                <InputRadio Value="@("Male")" /> @("Male")
            </InputRadioGroup>
        </div>
    </div>

  @*  <div class="form-group row">
        <label for="gender" class="col-md-2 col-form-label">Gender:</label>
        <div class="col-md-10">
            <InputText id="gender" class="form-control" @bind-Value="user.Gender" />
            <ValidationMessage For="@(() => user.Gender)" />
        </div>
    </div>*@

   
    

    @if (Role == "admin")
    {
        <div class="form-group row">
            <label for="tenant_select" class="col-md-2 col-form-label">Tenant:</label>
            <div class="col-md-10">
                <InputSelect id="tenant_select" @bind-Value="TenantId">
                    @foreach (var tenant in Tenants)
                    {
                        <option value="@tenant.Id">@tenant.Name</option>
                    }
                </InputSelect>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </div>
</EditForm>

<p>@Message</p>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public UserModal user { get; set; }

    public Guid TenantId { get; set; }

    public string Message { get; set; }

    public string Role { get; set; }

    public string token { get; set; }

    public List<Tenant> Tenants { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = new UserModal();
        Message = string.Empty;
        token = await localStorageService.GetItem<string>("token");
        var handler = new JwtSecurityTokenHandler();
        var jwtSecurityToken = handler.ReadJwtToken(await localStorageService.GetItem<string>("token"));
        Role = jwtSecurityToken.Claims.Where(x => x.Type == "role").FirstOrDefault().Value;
        if (Role == "admin")
        {
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            var result = await httpClient.GetAsync("api/Tenant/GetAllTenants");
            Tenants = await result.Content.ReadFromJsonAsync<List<Tenant>>();
        }
        else
        {
            var claimObject = jwtSecurityToken.Claims.Where(x => x.Type == "TenantId").FirstOrDefault();
            string? value = claimObject.Value;
            user.TenantId = new Guid(value);
        }
        if (!string.IsNullOrEmpty(Id))
        {
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            var userRes = await httpClient.GetFromJsonAsync<User>("api/User/GetById?Id=" + Id);
            user.Id = userRes.Id;
            user.Address = userRes.Address;
            user.IsEmailVerified = userRes.IsEmailVerified;
            user.IsDeleted = userRes.IsDeleted;
            user.TenantId = userRes.TenantId;
            user.Country = userRes.Country;
            user.Gender = userRes.Gender;
            user.DOB = userRes.DOB;
            user.Email = userRes.Email;
            user.Name = userRes.Name;
            user.UserType = userRes.UserType;
            user.Password = userRes.Password;
            TenantId = user.TenantId;

        }
           
    }

    public async void Save()
    {
        try
        {
            user.UserType = "user";
            user.IsDeleted = false;
            if (Role == "admin")
            {
                user.TenantId = TenantId;
            }
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            ResponseModal? responseModal;
            if(user.Id != new Guid())
            {
                var result = await httpClient.PostAsJsonAsync("api/User/UpdateUser", user);
                responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();

            }
            else
            {
                var result = await httpClient.PostAsJsonAsync("api/Account/AddUser", user);
                responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();

            }
            if (responseModal?.StatusCode == 200 && responseModal?.Message == "Success")
            {
                user.Email = string.Empty;
                user.Name = string.Empty;
                user.UserType = string.Empty;
                user.Password = string.Empty;
                Message = responseModal.Message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}