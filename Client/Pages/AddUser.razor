@page "/add_user"

@using CDPModule1.Client.Services;
@using CDPModule1.Shared
@using CDPModule1.Shared.RequestModel
@using System.Text
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;

<PageTitle>Index</PageTitle>

<h1>Add Tenant</h1>


<EditForm Model="@user" OnValidSubmit="@Save" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Name:</label>
        <div class="col-md-10">
            <InputText id="name" class="form-control" @bind-Value="user.Name" />
            <ValidationMessage For="@(() => user.Name)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="user.Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="user_type" class="col-md-2 col-form-label">Is Admin:</label>
        <div class="col-md-10">
            <InputCheckbox @bind-Value=@isAdmin />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Register</button>
        </div>
    </div>
</EditForm>

<p>@Message</p>

@code {
    [Parameter]
    public AccountModal user { get; set; }
    [Parameter]
    public bool isAdmin { get; set; }
    [Parameter]
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isAdmin = false;
        user = new AccountModal();
        Message = string.Empty;
    }

    public async void Save()
    {
        try
        {
            Console.WriteLine(user.Name);
            user.UserType = isAdmin ? "Admin" : "Tenant";
            string token = await localStorageService.GetItem<string>("token");
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            var result = await httpClient.PostAsJsonAsync("api/Account/Register", user);
            ResponseModal? responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();
            if (responseModal?.StatusCode == 200)
            {
                user.Email = string.Empty;
                user.Name = string.Empty;
                user.UserType = string.Empty;
                user.Password = string.Empty;
                isAdmin = false;
                Message = responseModal.Message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}