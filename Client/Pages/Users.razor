@page "/users"

@using CDPModule1.Client.Services;
@using CDPModule1.Shared;
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;
@inject NavigationManager NavManager


<button onclick="@CreateNew" style="background-color:rgb(134,188,37)" class="btn btn-success">Create New User</button>
@if (UserList != null)
{

    <table class="table table-striped">
        <thead>
            <tr>

                <th>Name</th>
                <th>Email</th>
                <th>UserType</th>
                <th>Gender</th>
                <th>Address</th>
                <th>Tenant</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in UserList)
            {
                <tr>

                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.UserType</td>
                    <td>@user.Gender</td>
                    <td>@user.Address</td>
                    <td>@user.Tenant.Name</td>
                    <td>
                        <button class="btn-info" @onclick="() => OpenEdit(user.Id)">Edit</button>
                        <button class="btn-danger" @onclick="() => Delete(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading....</p>
}
@code {
    [Parameter]
    public List<User> UserList { get; set; } = new List<User>();

    public string token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        token = await localStorageService.GetItem<string>("token");
        UserList = await Reload();
    }

    public void CreateNew() => NavManager.NavigateTo("/add_user/", true);

    public void OpenEdit(Guid Id) => NavManager.NavigateTo("/add_user/" + Id, true);

    public async Task Delete(Guid Id)
    {
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        //var u =  UserList.Where(x => x.Id == Id).FirstOrDefault();
        httpClient.DefaultRequestHeaders
    .Accept
    .Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));//ACCEPT header

        HttpResponseMessage result = await httpClient.PostAsJsonAsync("api/User/DeleteUser",Id);
        try
        {
            ResponseModal? responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();
            if (responseModal.Message == "Success")
            {
                UserList = await Reload();
            }
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    
    public async Task<List<User>> Reload()
    {
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        var result = await httpClient.GetAsync("api/Account/GetAllUsers");
        return await result.Content.ReadFromJsonAsync<List<User>>();        
    }
}