@page "/tenants"

@using CDPModule1.Client.Services;
@using CDPModule1.Shared;
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;
@inject NavigationManager NavManager


<h3>Tenants</h3>

<button onclick="@CreateNew" style="background-color:rgb(134,188,37)" class="btn btn-success">Create New Tenant</button>
@if (TenantList != null)
{
    <table class="table">
        <thead>
            <tr>
                
                <th>Name</th>
                <th>Email</th>
                <th>Contact</th>
                <th>Address</th>
                <th>Country</th>
                <th>GST Number</th> 
                <th>PAN Number</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in TenantList)
            {
                <tr>
                   
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Contact</td>
                    <td>@user.Address</td>
                    <td>@user.Country</td>
                    <td>@user.GstNumber</td>
                    <td>@user.PanNumber</td>
                    <td>
                        <button class="btn-info" @onclick="() => OpenEdit(user.Id)">Edit</button>
                        <button class="btn-danger" @onclick="() => Delete(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading.........</p>
}
@code {
    [Parameter]
    public List<Tenant> TenantList { get; set; }

    public string token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        token = await localStorageService.GetItem<string>("token");
        TenantList = await Reload();
    }

    public void CreateNew() => NavManager.NavigateTo("/add_tenant", true);

    public void OpenEdit(Guid Id) => NavManager.NavigateTo("/add_tenant/"+Id, true);

    public async Task Delete(Guid Id)
    {
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        var selectedTenant = TenantList.Where(x => x.Id == Id).FirstOrDefault();
        var result = await httpClient.PostAsJsonAsync("api/Tenant/DeleteTenant", selectedTenant);
        ResponseModal? responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();
        if(responseModal.Message == "Success")
        {
            TenantList = await Reload();

        }
    }

    public async Task<List<Tenant>> Reload()
    {
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        var result = await httpClient.GetAsync("api/Tenant/GetAllTenants");
        var item = result.Content.ReadAsStringAsync();
        return await result.Content.ReadFromJsonAsync<List<Tenant>>(); 
    }
}

