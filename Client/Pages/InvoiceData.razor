@page "/invoices"


@using CDPModule1.Client.Services;
@using CDPModule1.Shared;
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;
@inject NavigationManager NavManager

<div class="card shadow-lg">

    <div class="list-group-item" style=" margin: auto; padding: 20px; width: 100%; max-width: 100%;">

        <label>Search By:</label>
        <div class="row">
            <select id="templateValue" class="form-control" @bind="TemplateId">
    <option value="1">METRONATION CHENNAI TELEVISION</option>
    <option value="2">TV18 Broadcast Limited</option>
</select>
<br>
            <div class="text-center">
                <button class="btn btn-primary" style="background-color:rgb(134,188,37)" @onclick="@GetInvoiceData">Apply</button>
            </div>
        </div>
    </div>
   
</div>

<br>



@if (InvoiceList != null)
{
     


    <GridView Items="FilteredData" ReloadList="IsGridViewFiltered" OnSearchTextChanged="OnSearchTextChanged">
                <GridColumns>
                <GridColunm ColumnTitle="Channel"></GridColunm>
                <GridColunm ColumnTitle="Program"></GridColunm>
                <GridColunm ColumnTitle="Date"></GridColunm>
            <GridColunm ColumnTitle="Day"></GridColunm>
                <GridColunm ColumnTitle="Caption"></GridColunm>
                </GridColumns>
            <GridRow Context="InvoiceList">
                <td>@InvoiceList.Program</td>
                <td>@InvoiceList.Date</td>
                <td>@InvoiceList.Day</td>
                <td>@InvoiceList.Caption</td>
            </GridRow>
            </GridView>
}

   else
    {
    <p>Loading......</p>
    }




@code {
    //[Parameter]
    public List<AgencyInvoiceData> InvoiceList { get; set; }
    public bool IsGridViewFiltered { get; set; }
    List<AgencyInvoiceData> FilteredData;
    public int TemplateId { get; set; }



    public string token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        token = await localStorageService.GetItem<string>("token");
        InvoiceList = await Reload();
        FilteredData = InvoiceList;
    }

    public async Task GetInvoiceData()
    {
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        var result = await httpClient.GetAsync("api/File/GetAllAgencyInvoiceByTemplate?templateId=" + TemplateId);
        var item = result.Content.ReadAsStringAsync();
        InvoiceList= await result.Content.ReadFromJsonAsync<List<AgencyInvoiceData>>();
        FilteredData = InvoiceList;
        this.StateHasChanged();
    }

    // public void CreateNew() => NavManager.NavigateTo("/add_tenant/", true);

    // public void OpenEdit(Guid Id) => NavManager.NavigateTo("/add_tenant/" + Id, true);

    //public async Task Delete(Guid Id)
    //{
    //    httpClient.DefaultRequestHeaders.Clear();
    //    httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
    //    var selectedTenant = InvoiceList.Where(x => x.Id == Id).FirstOrDefault();
    //    var result = await httpClient.PostAsJsonAsync("api/Tenant/DeleteTenant", selectedTenant);
    //    ResponseModal? responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();
    //    if (responseModal.Message == "Success")
    //    {
    //        TenantList = await Reload();

    //    }
    //}

    public async Task<List<AgencyInvoiceData>> Reload()
    {
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        var result = await httpClient.GetAsync("api/File/GetAllAgencyInvoice");
        var item = result.Content.ReadAsStringAsync();
       
    
        return await result.Content.ReadFromJsonAsync<List<AgencyInvoiceData>>();
      
    }
    private void OnSearchTextChanged(ChangeEventArgs changeEventArgs)
    {
        try
        {
            string searchText = changeEventArgs.Value.ToString();
            IsGridViewFiltered = true;
            FilteredData = InvoiceList.Where(x => x.Channel.ToLower().ToString().Contains(searchText) ||
            (x.Channel != null && x.Channel.ToLower().ToString().Contains(searchText))).ToList();
        }
        catch (Exception ex)
        {



        }
    }



}