@page "/upload"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text;
@using CDPModule1.Client.Services;
@using CDPModule1.Shared;
@using GrapeCity.Documents.Pdf;
@using GrapeCity.Documents.Pdf.TextMap;
@using System.Net.Http.Headers;
@using iText.Kernel.Pdf;
@using iText.Kernel.Pdf.Canvas.Parser.Listener;
@using iText.Kernel.Pdf.Canvas.Parser;
@using static CDPModule1.Client.Services.EnumService;
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;

<h1>Upload File </h1>
<div class="row m-1">
    <label class="col-2">Select File :</label>
    <InputFile OnChange="@uploadPdfNew" id="FileUpload1" class="col-9" />
</div>

<button type="button" onclick="insertData()" class="btn btn-success m-1">Save</button>



@code {



    public async Task uploadPdfNew(InputFileChangeEventArgs inputFileChangeEvent)
    {
        try
        {
            var file = inputFileChangeEvent.File;
            byte[] buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            string base64 = Convert.ToBase64String(buffer);
            using var dataContent = new MultipartFormDataContent();


            httpClient.DefaultRequestHeaders.Clear();
            string token = await localStorageService.GetItem<string>("token");
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            httpClient.DefaultRequestHeaders.Add("ContentType", "application/json");

            var content = new FileResultContent
                {
                    base64Content = base64,
                    fileExt = "pdf",
                    existingFileName = file.Name,
                    newFileName = Path.GetRandomFileName().Split('.')[0]

                };
            var res = await httpClient.PostAsJsonAsync("api/File/uploadPdf", content);

            var x = res;


        }
        catch (Exception ex)
        {
            Console.WriteLine("error");
        }
    }
}