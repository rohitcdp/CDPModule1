@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text;
@using CDPModule1.Client.Services;
@using CDPModule1.Client.dynamicInvoice;
@using CDPModule1.Shared;
@using GrapeCity.Documents.Pdf;
@using GrapeCity.Documents.Pdf.TextMap;
@using System.Net.Http.Headers;
@using System.Collections;
@using System.Globalization;
@using iText.Kernel.Pdf;
@using iText.Kernel.Pdf.Canvas.Parser.Listener;
@using iText.Kernel.Pdf.Canvas.Parser;
@using static CDPModule1.Client.Services.EnumService;
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;
@inject IApiService ApiService;

<h1>Upload File </h1>


<div class="card shadow-lg">

    <div class="list-group-item" style=" margin: auto; padding: 20px; width: 100%; max-width: 100%;">

       <label class="col-2">Template Type:</label>
        <div class="row">
            
            <select id="templateValue" class="form-control" @bind="TemplateId">
                <option value="1">METRONATION CHENNAI TELEVISION</option>
                <option value="2">TV18 Broadcast Limited</option>
            </select>
                <br>
            <label>Select File :</label>
            <InputFile OnChange="@uploadPdfNew" id="FileUpload1" class="col-9" />
             @if(ShowLoader)
                                {
                <div class="loader">Loading...</div>
            
                                }
            <br>
            <div class="text-center">
                  @if(buttonhidden)
                                {
                    <button type="button" @onclick="() =>insertData()" style="background-color:rgb(134,188,37)" class="btn btn-success m-1">Save</button>
                                }

            </div>
        </div>
    </div>
   
</div>

<br>
<div class="row m-1">
    <label class="col-2">Template Type:</label>
    <select id="templateValue" class="col-6" @bind="TemplateId">
       @* <option value="1">METRONATION CHENNAI TELEVISION</option>
        <option value="2">TV18 Broadcast Limited</option>*@
        @foreach (var dl in @InvoiceTemplateList)
        {
            <option value="@dl.Id">@dl.TemplateName</option>
        }
    </select>
    <label class="col-2">Select File :</label>
    <InputFile OnChange="@uploadPdfNew" id="FileUpload1" class="col-9" />
</div>



@code {

    //public int TemplateId { get; set; }
    public bool buttonhidden { get; set; } = false;
    public bool ShowLoader { get; set; } = false;
    public Guid TemplateId { get; set; }

    public List<List<string>> Data { get; set; }

    public List<InvoiceTemplate> InvoiceTemplateList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage listRes = await ApiService.GetWithAuthAsync("api/File/GetAllInvoiceTemplate");
        InvoiceTemplateList = await listRes.Content.ReadFromJsonAsync<List<InvoiceTemplate>>();
    }

    public async Task insertData()
    {
        try
        {
            List<AgencyInvoiceData> lstAgd = new List<AgencyInvoiceData>();
            if (Data.Count > 0)
            {
                GenerateDynamicInvoice gdn = new GenerateDynamicInvoice(Data);
                //var i = 0;
               #region  old code
                //foreach (var list in Data)
                //{
                //    string[] a = list.ToArray();

                //    if (TemplateId == new Guid("86BD5AAB-4C99-40F3-FA0A-08DAF0181353"))
                //    {

                //        if (list.Count < 8)
                //        {                    
                //            if (a[0].ToString().Replace("\"", "").ToLower() == "programme" && a[2].ToString().Replace("\"", "").ToLower() == "date")
                //            {
                //                continue;
                //            }

                //            AgencyInvoiceData agd = new AgencyInvoiceData
                //                {
                //                    Program = a[0].ToString().Replace("\"", ""),
                //                    Channel = a[6].ToString().Replace("\"", ""),
                //                    Day = a[3].ToString().Replace("\"", ""),
                //                    Date = a[2].ToString().Replace("\"", ""),
                //                    TemplateId = this.TemplateId,
                //                    //agd.NetRate = Convert.ToInt32(a[5]);
                //                    Time = TimeSpan.Parse(a[4].ToString().Replace("\"", "")),
                //                };


                //            lstAgd.Add(agd);

                //        }
                //    }



                //    if (TemplateId == new Guid("86BD5AAB-4C99-40F3-FA0A-08DAF0181354"))
                //    {

                //        if (a[0].ToString().Replace("\"", "").Trim() == "" || a[2].ToString().Replace("\"", "").Trim() == "" || a[6].ToString().Replace("\"", "").Trim() == "")
                //        {
                //            continue;
                //        }

                //        if (list.Count == 7)
                //        {
                //            AgencyInvoiceData agd = new AgencyInvoiceData
                //                {

                //                    Program = a[2].ToString().Replace("\"", ""),
                //                    Channel = a[1].ToString().Replace("\"", ""),
                //                    Dur = Convert.ToInt32(a[4].ToString().Replace("\"", "")),
                //                    Amount = Convert.ToDouble(a[6].ToString().Replace("\"", "")),
                //                    Date = a[0].ToString().Replace("\"", ""),
                //                    TemplateId = TemplateId,
                //                };
                //            lstAgd.Add(agd);
                //        }

                //        if (list.Count == 8)
                //        {
                //            if (a[7].ToString().Replace("\"", "").Trim() == "")
                //            {
                //                continue;
                //            }

                //            AgencyInvoiceData agd = new AgencyInvoiceData
                //                {

                //                    Program = a[2].ToString().Replace("\"", ""),
                //                    Channel = a[1].ToString().Replace("\"", ""),
                //                    Dur = Convert.ToInt32(a[5].ToString().Replace("\"", "")),
                //                    Amount = Convert.ToDouble(a[7].ToString().Replace("\"", "")),
                //                    Date = a[0].ToString().Replace("\"", ""),
                //                    TemplateId = new Guid("86BD5AAB-4C99-40F3-FA0A-08DAF0181354"),
                //                };
                //            lstAgd.Add(agd);


                //        }



                //    }

                //}
               #endregion



                //await ApiService.PostWithAuthAsync("api/File/SaveFile", lstAgd);

            }


        }
        catch (Exception e)
        {
            throw e;
        }
    }

    public async Task uploadPdfNew(InputFileChangeEventArgs inputFileChangeEvent)
    {
        try
        {

            ShowLoader = true;
            buttonhidden = false;
            var file = inputFileChangeEvent.File;
            byte[] buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            string base64 = Convert.ToBase64String(buffer);
            using var dataContent = new MultipartFormDataContent();


            httpClient.DefaultRequestHeaders.Clear();
            string token = await localStorageService.GetItem<string>
             ("token");
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            httpClient.DefaultRequestHeaders.Add("ContentType", "application/json");

            var content = new FileResultContent
                {
                    base64Content = base64,
                    fileExt = "pdf",
                    existingFileName = file.Name,
                    newFileName = Path.GetRandomFileName().Split('.')[0]

                };
            HttpResponseMessage result = await httpClient.PostAsJsonAsync("api/File/uploadPdf", content);
            DataResponseModal? responseModal = await result.Content.ReadFromJsonAsync<DataResponseModal>
                ();

            Data = responseModal.Data;
            ShowLoader = false;
            buttonhidden = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("error");
        }
    }
}
<style>

    .loader {
        width: 250px;
        height: 50px;
        line-height: 50px;
        text-align: center;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-family: helvetica, arial, sans-serif;
        text-transform: uppercase;
        font-weight: 900;
        color: #0c2642;
        letter-spacing: 0.2em
    }

        .loader::before, .loader::after {
            content: "";
            display: block;
            width: 15px;
            height: 15px;
            background: #0c2642;
            position: absolute;
            -webkit-animation: load 0.7s infinite alternate ease-in-out;
            animation: load 0.7s infinite alternate ease-in-out
        }

        .loader::before {
            top: 0
        }

        .loader::after {
            bottom: 0
        }

    }
</style>
