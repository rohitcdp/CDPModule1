@page "/Upload"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Text;
@using CDPModule1.Client.Services;
@using CDPModule1.Shared;
@using GrapeCity.Documents.Pdf;
@using GrapeCity.Documents.Pdf.TextMap;
@using System.Net.Http.Headers;
@using iText.Kernel.Pdf;
@using iText.Kernel.Pdf.Canvas.Parser.Listener;
@using iText.Kernel.Pdf.Canvas.Parser;
@using static CDPModule1.Client.Services.EnumService;
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;

    <h1>Upload File </h1>
    <div class="row m-1"  >
    <label class="col-2">Select File :</label>
    <InputFile OnChange="@uploadPdfNew" id="FileUpload1" class="col-9"/>
    </div>

    <div class="row m-1">
        <label class="col-2">Template Name :</label>
        <input class="col-3" type="text" name="name" id="templateName" placeholder="Template Name" />
     </div>

     <div class="row m-1">
        <label class="col-2">Template Type:</label>
        <select id="valueType" class="col-6" onchange="typeChange(this)">
            <option value="1">Dynamic</option>
            <option value="2">Static</option>
        </select>
        <input id="static_type" class="col-4" type="text" placeholder="Enter.." style="display:none" />
    </div>

    <div class="row m-1">
     <label class="col-2">Filed Type: </label>
        <select id="Field" class="col-6" onchange="fieldTypeChange(this)">
            @foreach (var f in Enum.GetValues(typeof(FieldType)))
            {
                <option value="@f">@f</option>
            }
        </select>
        <input id="custom_filed" class="col-4" type="text" placeholder="Enter Field Name" style="display:none"/>
    </div>

    <input type="text" name="name" placeholder="select a value" id="propText" />
    <button class="btn btn-success m-1" type="button" >Map Property</button>
    <button type="button" onclick="insertData()" class="btn btn-success m-1">Save</button>     

@((MarkupString)@htmlCode.Replace("\r\n", "<br />"));

@code {

    private List<UploadResult> uploadResults = new();
    [Parameter]
    public string htmlCode { get; set; } = string.Empty;

    public int dataTypeSelected = 2;

    public string staticData = string.Empty;

    public List<string> DataTypeList = new List<string> { 1.ToString(), 2.ToString() };

    public string TemplateName { get; set; }


    public async Task uploadPdfNew(InputFileChangeEventArgs inputFileChangeEvent)
    {
        try
        {
            var file = inputFileChangeEvent.File;
            byte[] buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            string base64 = Convert.ToBase64String(buffer);
            using var dataContent = new MultipartFormDataContent();


            httpClient.DefaultRequestHeaders.Clear();
            string token = await localStorageService.GetItem<string>("token");
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            httpClient.DefaultRequestHeaders.Add("ContentType", "application/json");

            var content = new FileResultContent
                {
                    base64Content = base64,
                    fileExt = "pdf",
                    existingFileName = file.Name,
                    newFileName = Path.GetRandomFileName().Split('.')[0]

                };
            var res = await httpClient.PostAsJsonAsync("api/File/uploadPdf", content);
            string responseModal = await res.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(responseModal))
            {
                htmlCode = responseModal;
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine("error");
            htmlCode = "Error in api";
        }
    }
}