@page "/add_tenant"
@page "/add_tenant/{Id}"

@using CDPModule1.Client.Services;
@using CDPModule1.Shared
@using CDPModule1.Shared.RequestModel
@using System.Text
@inject HttpClient httpClient
@inject ILocalStorageService localStorageService;

<PageTitle>TenantForm</PageTitle>

<h1>Tenant</h1>


<EditForm Model="@tenant" OnValidSubmit="@Save" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Name:</label>
        <div class="col-md-10">
            <InputText id="name" class="form-control" @bind-Value="tenant.Name" />
            <ValidationMessage For="@(() => tenant.Name)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="tenant.Email" />
            <ValidationMessage For="@(() => tenant.Email)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Contact:</label>
        <div class="col-md-10">
            <InputText id="contact" class="form-control" @bind-Value="tenant.Contact" />
            <ValidationMessage For="@(() => tenant.Contact)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Address:</label>
        <div class="col-md-10">
            <InputText id="address" class="form-control" @bind-Value="tenant.Address" />
            <ValidationMessage For="@(() => tenant.Address)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">Country:</label>
        <div class="col-md-10">
            <InputText id="country" class="form-control" @bind-Value="tenant.Country" />
            <ValidationMessage For="@(() => tenant.Country)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">GST Number:</label>
        <div class="col-md-10">
            <InputText id="gstNumber" class="form-control" @bind-Value="tenant.GstNumber" />
            <ValidationMessage For="@(() => tenant.GstNumber)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="confirm" class="col-md-2 col-form-label">PAN Number:</label>
        <div class="col-md-10">
            <InputText id="panNumber" class="form-control" @bind-Value="tenant.PanNumber" />
            <ValidationMessage For="@(() => tenant.PanNumber)" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </div>
</EditForm>

<p>@Message</p>

@code {
    [Parameter]
    public Tenant tenant { get; set; }

    [Parameter]
    public string Id { get; set; }

    public List<Tenant> allTenants { get; set; }

    public string token { get; set; }

    [Parameter]
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tenant = new Tenant();
        Message = string.Empty;
        GetTenants();
        Console.WriteLine(Id);
        token = await localStorageService.GetItem<string>("token");
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        tenant = await httpClient.GetFromJsonAsync<Tenant>("api/Tenant/GetTenantById?Id=" + Id);
        //tenant = await result.Content.ReadFromJsonAsync<Tenant>();

    }

    public async void GetTenants()
    {
        token = await localStorageService.GetItem<string>("token");
        httpClient.DefaultRequestHeaders.Clear();
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
        var result = await httpClient.GetAsync("api/Account/GetAllTenants");

    }

    public async void Save()
    {
        try
        {
            tenant.CreatedOn = DateTime.Now;
            tenant.ModifiedOn = DateTime.Now;
            tenant.IsDeleted = false;
            string token = await localStorageService.GetItem<string>("token");
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            ResponseModal? responseModal = null;
            if(tenant.Id != new Guid())
            {
                var result = await httpClient.PostAsJsonAsync("api/Tenant/UpdateTenant", tenant);
                responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();
            }
            else
            {
               var result = await httpClient.PostAsJsonAsync("api/Account/AddTenant", tenant);
               responseModal = await result.Content.ReadFromJsonAsync<ResponseModal>();
             
            }
            if (responseModal?.StatusCode == 200 && responseModal?.Message == "Success")
            {
                tenant = new Tenant();
                Message = responseModal.Message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}